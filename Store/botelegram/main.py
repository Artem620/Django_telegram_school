import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Store.settings')

django.setup()
from Users.models import User
import telebot
import function_bot

token = "7470312463:AAHyOhDBNgjJdJ_8s7i2sIMPd7p_E-QPRQs"
bot = telebot.TeleBot(token)
users = {}
result = []
user_teacher_or_student = ""
check_index_techer = False


@bot.message_handler(commands=['start'])
def hello_start(message):
    chat_id = message.chat.id
    users[chat_id] = {}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, save_login)


def save_login(message):
    chat_id = message.chat.id
    login = message.text
    users[chat_id]['login'] = login
    bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ, {login}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, save_password)


def save_password(message):
    chat_id = message.chat.id
    password = message.text
    users[chat_id]['password'] = password
    result = function_bot.check(login=users[chat_id]['login'], password=password)
    user_teacher_or_student = users[chat_id]["login"]
    if result[0] == 1:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_teacher = telebot.types.InlineKeyboardButton(text="üë©üèª‚Äçüè´ –£—á–∏—Ç–µ–ª—å", callback_data="teacher")
        button_student = telebot.types.InlineKeyboardButton(text="üë®üèª‚Äçüéì –£—á–µ–Ω–∏–∫", callback_data="student")
        keyboard.add(button_student, button_teacher)

        bot.send_message(chat_id, f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,{result[1]} {result[2]}\n"
                                  f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard)
    if result[0] == 2:

        if result[5] == "teacher":
            if result[6] is None:
                bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
            elif result[6] is not None:
                teacher_profile(message=message, res=result)
        else:
            user_profile(message=message, res=result)

    if result[0] == 3:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_teacher = telebot.types.InlineKeyboardButton(text="–ó–∞–Ω–æ–≤–æ", callback_data="restart")
        button_restart_password = telebot.types.InlineKeyboardButton(text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å",
                                                                     callback_data="password_restart",
                                                                     url="http://127.0.0.1:8000/")
        keyboard.add(button_teacher, button_restart_password)
        bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ['teacher', 'student'])
def profile_selection(call):
    result1 = []
    dataprof = ""
    if call.data == 'teacher':
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏: –£—á–∏—Ç–µ–ª—å")
        dataprof = "teacher"
    elif call.data == 'student':
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏: –£—á–µ–Ω–∏–∫")
        dataprof = "student"
    user_login = users[call.message.chat.id]['login']
    function_bot.student_teacher(user_login, prof=dataprof)
    result1 = function_bot.check(login=users[call.message.chat.id]['login'], password=" ")
    if dataprof == "student":
        user_profile(message=call.message, res=result1)
    if dataprof == "teacher" and result1[6] is not None:
        teacher_profile(message=call.message, res=result1)
    elif dataprof == "teacher" and result1[6] is None:
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")


def teacher_profile(message, res):
    chat_id = message.chat.id
    if type(res[0]) == int and res[len(res) - 1] is not None:
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        btn1 = telebot.types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ", callback_data="week")
        btn2 = telebot.types.InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="home_work")
        btn3 = telebot.types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∏", callback_data="evaluations")
        keyboard.add(btn1, btn2, btn3)
        bot.send_message(chat_id=message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, {res[1]} {res[2]}.\n", reply_markup=keyboard)
    else:
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        btn1 = telebot.types.InlineKeyboardButton(text="–ì–µ–æ—Ä–∞—Ñ–∏—è", callback_data="–ì–µ–æ—Ä–∞—Ñ–∏—è")
        btn2 = telebot.types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞", callback_data="–§–∏–∑–∏–∫–∞")
        btn3 = telebot.types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        btn4 = telebot.types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
        btn5 = telebot.types.InlineKeyboardButton(text="–•–∏–º–∏—è", callback_data="–•–∏–º–∏—è")
        btn6 = telebot.types.InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        keyboard.add(btn1, btn2, btn3, btn4, btn5, btn6)
        bot.send_message(chat_id=message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,{res[0]} {res[1]}.\n"
                                                       f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


def user_profile(message, res,selected_time = False):
    chat_id = message.chat.id
    if selected_time == True:
        res = function_bot.check(users[chat_id]["login"],users[chat_id]['password'])
    resu = []
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    btn1 = telebot.types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ", callback_data="week")
    btn2 = telebot.types.InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="home_work")
    btn3 = telebot.types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∏", callback_data="evaluations")
    if  res[4] is None:
        resu = function_bot.predment_list(users[chat_id]["login"])
        btn4 = telebot.types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤", callback_data="week_new")
        keyboard.add(btn1, btn2, btn3, btn4)
    else:
        resu = function_bot.predment_list(users[chat_id]["login"])
        keyboard.add(btn1, btn2, btn3)
    if len(resu) == 2:
        subjetc = "\n".join(resu)
        bot.send_message(chat_id=message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, {res[2]} {res[1]}.\n"
                                                       f"–í–∞—à –ø—Ä–µ–¥–º–µ—Ç {subjetc}.\n"
                                                       f"–ú—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è",
                         reply_markup=keyboard)
    else:
        subjetc = "\n".join(resu)
        bot.send_message(chat_id=message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, {res[2]} {res[1]}.\n"
                                                       f"–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã {subjetc}.\n"
                                                       f"–ú—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è",
                         reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ['week', 'home_work', 'evaluations', 'week_new'])
def handler_main(call):
    chat_id = call.message.chat.id

    if chat_id not in users:
        users[chat_id] = {'index_photo': 0, 'teachers': []}

    student = function_bot.check(login=users[chat_id]['login'], password=users[chat_id]["password"], check_predmet=1)
    teachers = []
    for subject in student[-1]:
        teachers.extend(function_bot.teacher_list(subject))

    users[chat_id]['teachers'] = teachers

    if call.data == "week_new":
        bot.send_message(chat_id,
                         "–ü—Ä–∏–≤–µ—Ç, –Ω–∞—à –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! \n–°–µ–π—á–∞—Å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä ‚Äî –≤—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –°–µ–π—á–∞—Å –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π, –∏—Ö —Ñ–æ—Ç–æ –∏ —Ä–µ–≥–∞–ª–∏–∏.")
        send_photo_with_buttons(chat_id, teachers)


def send_photo_with_buttons(chat_id, teachers):

    if chat_id not in users:
        users[chat_id] = {'index_photo': 0, 'teachers': teachers}
    else:
        if 'index_photo' not in users[chat_id]:
            users[chat_id]['index_photo'] = 0
        if 'teachers' not in users[chat_id]:
            users[chat_id]['teachers'] = teachers
    index_photo = users[chat_id]['index_photo']
    teachers_list = users[chat_id]['teachers']

    keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)

    if index_photo > 0:
        keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data='prev'))

    keyboard.add(
        telebot.types.InlineKeyboardButton("‚û°Ô∏è", callback_data='next'),
        telebot.types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data='ok')
    )
    predmet_check = function_bot.check_predment(users[chat_id])

    if teachers_list:
        teacher = teachers_list[index_photo]
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π.")
        return
    if len(predmet_check) != 0:

        if hasattr(teacher, 'photo_teacher'):
            teacher_photo = teacher.photo_teacher
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —É—á–∏—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ñ–æ—Ç–æ.")
            return

        free_times = function_bot.check_time_teachers(teacher.username)

        if isinstance(free_times, dict):
            free_schedule = "\n".join([f"{day}: {', '.join(times)}" for day, times in free_times.items()])
        else:
            free_schedule = free_times

        if os.path.isfile(teacher_photo):
            with open(teacher_photo, "rb") as photo:
                bot.send_photo(chat_id, photo, caption=f"{teacher.fullname} {teacher.name} \n" + f"–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —É—á–∏—Ç–µ–ª—è:\n{free_schedule}", reply_markup=keyboard)
        else:
            bot.send_message(chat_id, "–§–æ—Ç–æ —É—á–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
    else:
        bot.send_message(chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —É—á–∏—Ç–µ–ª—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É " + teacher.predment)


@bot.callback_query_handler(func=lambda call: call.data in ["prev", "next", "ok"])
def handle_callback(call):
    chat_id = call.message.chat.id

    if chat_id not in users:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    index_photo = users[chat_id]['index_photo']
    teachers_list = users[chat_id]['teachers']

    if call.data == 'prev':
        index_photo = (index_photo - 1) % len(teachers_list)
    elif call.data == 'next':
        index_photo = (index_photo + 1) % len(teachers_list)
    elif call.data == 'ok':
        selected_teacher = teachers_list[index_photo]
        bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∏—Ç–µ–ª—è: {selected_teacher.name} {selected_teacher.fullname}!\n –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        bot.register_next_step_handler(call.message,selected_time,selected_teacher.name,selected_teacher.fullname,selected_teacher.predment)
        return

    users[chat_id]['index_photo'] = index_photo
    send_photo_with_buttons(chat_id, teachers_list)





@bot.callback_query_handler(func=lambda call: call.data in ["restart", "password_restart"])
def handle_query(call):
    if call.data == "restart":
        bot.send_message(call.message.chat.id, "–ó–∞–Ω–æ–≤–æ!")
        hello_start(call.message)
    else:
        bot.send_message(call.message.chat.id, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        hello_start(call.message)


@bot.message_handler(content_types=["photo"])
def photo_teach(message):
    chat_id = message.chat.id
    text = function_bot.save_photo(message, users[chat_id]["login"], bot)
    bot.send_message(message.chat.id, text[0])
    teacher_profile(message, text[1:])


@bot.callback_query_handler(
    func=lambda call: call.data in ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–•–∏–º–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∫–∏–∞"])
def save_predment_teacher(call):
    chat_id = call.message.chat.id
    r = call.data
    result2 = function_bot.save_teacher_predment(login=users[chat_id]["login"], predment=r)
    bot.send_message(call.message.chat.id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    teacher_profile(call.message, result2)


#–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
def selected_time(message,teacher_name,teacher_fullname,subject_teach):
    time = message.text
    chat_id = message.chat.id
    result_time = function_bot.result_time(time,teacher_fullname,users[chat_id]["login"],subject_name = subject_teach)
    bot.send_message(chat_id,"–û—Ç–ª–∏—á–Ω–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: " + result_time + "\n"
                     "–í—ã –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —É —É—á–∏—Ç–µ–ª—è: " + teacher_name +  " " +  teacher_fullname)
    user_profile(message,res = result,selected_time=True)
if __name__ == '__main__':
    print("–æ–∫")
    bot.polling(none_stop=True)