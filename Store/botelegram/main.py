import os
import django


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Store.settings')


django.setup()
from Users.models import User
import telebot
import function_bot
token = "7470312463:AAHyOhDBNgjJdJ_8s7i2sIMPd7p_E-QPRQs"
bot = telebot.TeleBot(token)
users = {}
result = []
user_teacher_or_student = ""
index_photo = 0
check_index_techer = False

@bot.message_handler(commands=['start'])
def hello_start(message):
    chat_id = message.chat.id
    users[chat_id] = {} 
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:",reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, save_login)

def save_login(message):
    chat_id = message.chat.id
    login = message.text
    users[chat_id]['login'] = login
    bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ, {login}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, save_password)

def save_password(message):
    chat_id = message.chat.id
    password = message.text
    users[chat_id]['password'] = password
    result = function_bot.check(login=users[chat_id]['login'], password=password)
    user_teacher_or_student = users[chat_id]["login"]
    if result[0] == 1:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_teacher = telebot.types.InlineKeyboardButton(text="üë©üèª‚Äçüè´ –£—á–∏—Ç–µ–ª—å", callback_data="teacher")
        button_student = telebot.types.InlineKeyboardButton(text="üë®üèª‚Äçüéì –£—á–µ–Ω–∏–∫", callback_data="student")
        keyboard.add(button_student, button_teacher)
        
        bot.send_message(chat_id, f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,{result[1]} {result[2]}\n"
                                  f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard)
    if result[0] == 2:

        if result[5] == "teacher":
            if result[6]  is None:
                bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
            elif result[6]  is not None:
                teacher_profile(message=message, res=result)
        else:
            user_profile(message=message, res=result)

    if result[0] == 3:
        keyboard = telebot.types.InlineKeyboardMarkup()
        button_teacher = telebot.types.InlineKeyboardButton(text="–ó–∞–Ω–æ–≤–æ", callback_data="restart")
        keyboard.add(button_teacher)
        bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.",reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ['teacher', 'student'])
def profile_selection(call):
    result = []
    dataprof = ""
    if call.data == 'teacher':
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏: –£—á–∏—Ç–µ–ª—å")
        dataprof = "teacher"
    elif call.data == 'student':
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏: –£—á–µ–Ω–∏–∫")
        dataprof = "student"
    user_login = users[call.message.chat.id]['login']
    function_bot.student_teacher(user_login,prof=dataprof)
    result = function_bot.check(login=users[call.message.chat.id]['login'],password= " ")
    if dataprof == "student":
        user_profile(message=call.message,res=result)
    if dataprof == "teacher" and result[6] is not None :
        teacher_profile(message=call.message,res=result)
    elif dataprof == "teacher" and result[6] is None:
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")

def teacher_profile(message,res):
    chat_id = message.chat.id
    if type(res[0]) == int and res[len(res)-1] is not None:
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        btn1 = telebot.types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ", callback_data="week")
        btn2 = telebot.types.InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="home_work")
        btn3 = telebot.types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∏", callback_data="evaluations")
        keyboard.add(btn1, btn2, btn3)
        bot.send_message(chat_id=message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, {res[1]} {res[2]}.\n", reply_markup=keyboard)
    else:
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        btn1 = telebot.types.InlineKeyboardButton(text="–ì–µ–æ—Ä–∞—Ñ–∏—è",callback_data="–ì–µ–æ—Ä–∞—Ñ–∏—è")
        btn2 = telebot.types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞",callback_data="–§–∏–∑–∏–∫–∞")
        btn3 = telebot.types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",callback_data="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        btn4 = telebot.types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",callback_data="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
        btn5 = telebot.types.InlineKeyboardButton(text="–•–∏–º–∏—è",callback_data="–•–∏–º–∏—è")
        btn6 = telebot.types.InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",callback_data="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        keyboard.add(btn1, btn2, btn3,btn4, btn5, btn6)
        bot.send_message(chat_id=message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ,{res[0]} {res[1]}.\n"
                                                       f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)

def user_profile(message,res):
    chat_id = message.chat.id
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    btn1 = telebot.types.InlineKeyboardButton(text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ",callback_data = "week")
    btn2 = telebot.types.InlineKeyboardButton(text="–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data = "home_work")
    btn3 = telebot.types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∫–∏",callback_data = "evaluations")
    if res[4] is None:
        btn4 = telebot.types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",callback_data = "week_new")
        keyboard.add(btn1, btn2, btn3, btn4)
    else:
        keyboard.add(btn1,btn2,btn3)
        resu = function_bot.predment_list(users[chat_id]["login"])
    if len(res) == 1:
             bot.send_message(chat_id = message.chat.id, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, { res[2]} {res[1]}.\n "
                                                              f"–í–∞—à –ø—Ä–µ–¥–º–µ—Ç {str(res[0])}.\n"
                                                              f"–ú—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è",reply_markup=keyboard)
    else:
        subjetc = "\n".join(result)
        bot.send_message(chat_id=message.chat.id,text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, { res[2]} {res[1]}.\n"
                                                      f"–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã {subjetc}.\n"
                                                              f"–ú—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è",reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ['week', 'home_work','evaluations','week_new'])
def handler_main(call):
    chat_id = call.message.chat.id
    student = function_bot.check(login=users[chat_id]['login'], password=users[chat_id]["password"])
    techears = function_bot.teacher_list(student[-1])



    match (call.data):
        case "week_new":
            bot.send_message(chat_id,
                             "–ü—Ä–∏–≤–µ—Ç, –Ω–∞—à –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! \n–°–µ–π—á–∞—Å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä ‚Äî –≤—ã–±–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –°–µ–π—á–∞—Å –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π, –∏—Ö —Ñ–æ—Ç–æ –∏ —Ä–µ–≥–∞–ª–∏–∏.")
            send_photo_with_buttons(chat_id, techears,False)


def send_photo_with_buttons(chat_id, teacher,check_index_techer):

    global index_photo
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)
    if index_photo > 0:
        keyboard.add(
            telebot.types.InlineKeyboardButton("–í–ª–µ–≤–æ", callback_data='prev')
        )

    keyboard.add(
        telebot.types.InlineKeyboardButton("–í–ø—Ä–∞–≤–æ", callback_data='next'),
        telebot.types.InlineKeyboardButton("–û–ö", callback_data='ok')
    )
    if check_index_techer == False:
        check_index_techer = True
        teacher_photo = teacher[index_photo].photo_teacher
    else:
        teacher_photo = teacher.photo_teacher

    if os.path.isfile(teacher_photo):
        with open(teacher_photo, "rb") as photo:
            bot.send_photo(chat_id, photo, reply_markup=keyboard)
    else:
        bot.send_photo(chat_id, teacher_photo, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ["prev", "next", "ok"])
def handle_callback(call):
    global index_photo
    chat_id = call.message.chat.id

    student = function_bot.check(login=users[chat_id]['login'], password=users[chat_id]["password"])
    techear = function_bot.teacher_list(student[-1])


    if call.data == 'prev':
        index_photo = (index_photo - 1) % len(techear)
    elif call.data == 'next':
        index_photo = (index_photo + 1) % len(techear)
    elif call.data == 'ok':
        bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∏—Ç–µ–ª—è.")

    send_photo_with_buttons(chat_id, techear[index_photo],True)
@bot.callback_query_handler(func=lambda call: call.data == "restart")
def handle_query(call):
    bot.send_message(call.message.chat.id, "–ó–∞–Ω–æ–≤–æ!")
    hello_start(call.message)

@bot.message_handler(content_types=["photo"])
def photo_teach(message):
    chat_id = message.chat.id
    text = function_bot.save_photo(message,users[chat_id]["login"],bot)
    bot.send_message(message.chat.id,text[0])
    teacher_profile(message,text[1:])

@bot.callback_query_handler(func=lambda call: call.data in ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞","–§–∏–∑–∏–∫–∞","–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ","–•–∏–º–∏—è","–ì–µ–æ–≥—Ä–∞—Ñ–∏—è","–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∫–∏–∞"])
def save_predment_teacher(call):
    chat_id = call.message.chat.id
    r = call.data
    result = function_bot.save_teacher_predment(login = users[chat_id]["login"],predment=r)
    bot.send_message(call.message.chat.id,"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    teacher_profile(call.message,result)





if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling()
